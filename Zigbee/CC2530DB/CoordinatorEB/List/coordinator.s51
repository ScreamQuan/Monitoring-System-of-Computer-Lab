///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        21/Dec/2021  00:32:18 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\Source\coordinator.c           /
//    Command line       =  -f C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-0 /
//                          1½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\S /
//                          impleAPIHeartBeatExp2\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wCoord.cfg (-DCPU32MHZ                    /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-0 /
//                          1½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\S /
//                          impleAPIHeartBeatExp2\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0       /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\zjw\Desktop\¿Î³Ì\ /
//                          ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SimpleAPIHeartBeatExp2\Source\ /
//                          coordinator.c -D ZTOOL_P1 -D xMT_TASK -D          /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          xLCD_SUPPORTED=DEBUG -lC                          /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\CoordinatorEB\List\   /
//                          -lA C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021- /
//                          01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\ /
//                          SimpleAPIHeartBeatExp2\CC2530DB\CoordinatorEB\Lis /
//                          t\ --diag_suppress Pe001,Pa010 -o                 /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\CoordinatorEB\Obj\    /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\ -I                   /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\Source\ -I         /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\ZMain\TI2530 /
//                          DB\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ20 /
//                          21-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Sampl /
//                          es\SimpleAPIHeartBeatExp2\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                       /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\target\CC2530EB\ -I                      /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\include\ -I C:\Users\zjw\Desktop\¿Î³Ì\Îï /
//                          ÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Project /
//                          s\zstack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\ -I      /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\ -I                      /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\single_chip\ -I          /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mt\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼ /
//                          ¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\ /
//                          Samples\SimpleAPIHeartBeatExp2\CC2530DB\..\..\..\ /
//                          ..\..\Components\osal\include\ -I                 /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\saddr\ -I                           /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\sdata\ -I                           /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\af\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍ /
//                          øÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\z /
//                          stack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\nwk\ -I              /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sapi\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁ /
//                          ªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\ -I            /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sys\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁª /
//                          ÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\ /
//                          zstack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨Ð /
//                          Å¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstac /
//                          k\Samples\SimpleAPIHeartBeatExp2\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\f8w\ -Ohz                 /
//                          --require_prototypes                              /
//    List file          =  C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\CoordinatorEB\List\co /
//                          ordinator.s51                                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??uart_receive?relay
        FUNCTION ??uart_receive?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        PUBLIC coordinatorInputCommandList
        PUBLIC coordinatorOutputCommandList
        PUBLIC uart_receive
        FUNCTION uart_receive,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 114, STACK
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 121, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 77, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_memcpy         SYMBOL "osal_memcpy"
sprintf             SYMBOL "sprintf"
osal_strlen         SYMBOL "osal_strlen"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_memcmp         SYMBOL "osal_memcmp"
HalUARTOpen         SYMBOL "HalUARTOpen"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalUARTRead         SYMBOL "HalUARTRead"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
??sprintf?relay     SYMBOL "?relay", sprintf
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
uart_receive        SYMBOL "uart_receive"
??uart_receive?relay SYMBOL "?relay", uart_receive
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN sapi_TaskID

// C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\SimpleAPIHeartBeatExp2\Source\coordinator.c
//    1 #include "smartHome.h"
//    2 #include "sapi.h"
//    3 
//    4 #include "osal.h"
//    5 #include "hal_uart.h"
//    6 #include "stdio.h"
//    7 
//    8 #define NUM_IN_CMD_COORINATOR 4
//    9 #define NUM_OUT_CMD_COORINATOR 1
//   10 void *alloceLedDeviceNode(uint8 lednum);
//   11 void uart_receive(uint8 port,uint8 event);

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   12 const cId_t coordinatorInputCommandList[NUM_IN_CMD_COORINATOR]=
coordinatorInputCommandList:
        DATA16
        DW 1
        DW 3
        DW 4
        DW 5
//   13                                 {LEDJOINNET_CMD_ID,HEART_BEAT_CMD_ID,TEMPERATURE_BEAT_CMD_ID,LIGHT_BEAT_CMD_ID};

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   14 const cId_t coordinatorOutputCommandList[NUM_OUT_CMD_COORINATOR]=
coordinatorOutputCommandList:
        DW 2
//   15                                 {TOGGLE_LED_CMD_ID};
//   16 struct led_device_node
//   17 {
//   18   struct led_device_node *next;
//   19   uint8 shortAddr[2];
//   20   uint8 lostHeartCount;
//   21   uint8 flag[1];
//   22 };
//   23 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   24 static struct led_device_node ledDeviceHeader={NULL};
ledDeviceHeader:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   25 
//   26 /*void *alloceLedDeviceNode(uint8 lednum)
//   27 {
//   28   return osal_mem_alloc(sizeof(struct led_device_node)-1+lednum);
//   29 }
//   30 */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   31 const SimpleDescriptionFormat_t zb_SimpleDesc=
zb_SimpleDesc:
        DB 1
        DATA16
        DW 1281
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW coordinatorInputCommandList
        DATA8
        DB 1
        DATA16
        DW coordinatorOutputCommandList
//   32 {
//   33   ENDPOINT_ID_SMARTHOME,
//   34   PROFILE_ID_SMARTHOME,
//   35   DEVICE_ID_COORDINATOR,
//   36   DEVIDE_VERSION_ID,
//   37   0,
//   38   NUM_IN_CMD_COORINATOR,
//   39   (cId_t*)coordinatorInputCommandList,
//   40   NUM_OUT_CMD_COORINATOR,
//   41   (cId_t*)coordinatorOutputCommandList  
//   42 };
//   43 /***********
//   44 Ö´ÐÐÊ±»ú£º·¢ËÍµÄÊý¾Ý°ü±»½ÓÊÕ·½ÊÕµ½Ê±±»µ÷ÓÃ
//   45 handle:°üµÄ±àºÅ£»
//   46 status:ZSUCCESS±íÊ¾³É¹¦½ÓÊÕ
//   47 ************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   48 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zb_SendDataConfirm
        CODE
//   49 {
        ; Saved register size: 0
        ; Auto size: 0
//   50   
//   51 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   52 
//   53 /***********
//   54 Ö´ÐÐÊ±»ú£º½ÓÊÕµ½Êý¾Ý°üÊ±±»µ÷ÓÃ
//   55 ************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   56 void zb_ReceiveDataIndication( uint16 source, uint16 command, 
zb_ReceiveDataIndication:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
        CODE
//   57                               uint16 len, uint8 *pData  )
//   58 {
        FUNCALL zb_ReceiveDataIndication, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 120, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 120, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 121, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 120, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 117, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 117, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 102
        MOV     A,#-0x66
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 117)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x77
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine6_0 & 0xFFFF
//   59   if(command==LEDJOINNET_CMD_ID){
??CrossCallReturnLabel_8:
        MOV     A,#0x1
        XRL     A,R4
        JNZ     ??zb_ReceiveDataIndication_0
        MOV     A,R5
??zb_ReceiveDataIndication_0:
        JZ      $+5
        LJMP    ??zb_ReceiveDataIndication_1 & 0xFFFF
//   60     char buf[100];
//   61     struct led_device_node *p=ledDeviceHeader.next;
        MOV     DPTR,#ledDeviceHeader
        SJMP    ??zb_ReceiveDataIndication_2
//   62     while(p!=NULL)
//   63     {
//   64       if( pData[0]==p->flag[0])
??zb_ReceiveDataIndication_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??zb_ReceiveDataIndication_4
//   65         break;
//   66       else
//   67       {
//   68         p=p->next;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
??zb_ReceiveDataIndication_2:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//   69       }
//   70     }
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??zb_ReceiveDataIndication_3
//   71     if(p==NULL)//ÐÂ½Úµã¼ÓÈë
//   72     {
//   73       struct led_device_node *np=(struct led_device_node *)osal_mem_alloc(sizeof(struct led_device_node));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   74       osal_memcpy(np->shortAddr,&source,2);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 120)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R3
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 117)
//   75       np->flag[0]=pData[0];
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//   76       np->next=ledDeviceHeader.next;//Í·²å
        MOV     DPTR,#ledDeviceHeader
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   77       ledDeviceHeader.next=np; 
        MOV     DPTR,#ledDeviceHeader
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//   78       p=np;
        SJMP    ??zb_ReceiveDataIndication_5
//   79     } 
//   80     else{
//   81       osal_memcpy(p->shortAddr,&source,2);
??zb_ReceiveDataIndication_4:
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 120)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine4 & 0xFFFF
//   82     }
??CrossCallReturnLabel_3:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 117)
//   83     sprintf(buf,"Led device come on!,shortAddr=%u,name:=%u",(uint16)p->shortAddr,(uint8)p->flag[0]);//´òÓ¡½ÚµãµØÖ·ºÍ±êÖ¾
??zb_ReceiveDataIndication_5:
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 119)
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 121)
        MOV     R4,#`?<Constant "Led device come on!,s...">` & 0xff
        MOV     R5,#(`?<Constant "Led device come on!,s...">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 117)
//   84     HalUARTWrite(0,buf,osal_strlen(buf));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//   85     HalUARTWrite(0,"\r\n",2);
//   86   }
??CrossCallReturnLabel_4:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        SJMP    ??zb_ReceiveDataIndication_6
//   87 //½ÓÊÕÐÄÌø°üÊý¾Ý
//   88   else if(command==HEART_BEAT_CMD_ID) {
??zb_ReceiveDataIndication_1:
        MOV     A,#0x3
        XRL     A,R4
        JNZ     ??zb_ReceiveDataIndication_7
        MOV     A,R5
??zb_ReceiveDataIndication_7:
        JNZ     ??zb_ReceiveDataIndication_8
//   89     struct led_device_node *p=ledDeviceHeader.next;
        MOV     DPTR,#ledDeviceHeader
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??CrossCallReturnLabel_0
//   90     while(p!=NULL)
//   91     {
//   92       if( osal_memcmp(&source,p->shortAddr,2)==TRUE)
//   93         break;
//   94       else
//   95       {
//   96         p=p->next;
??zb_ReceiveDataIndication_9:
        LCALL   ?Subroutine3 & 0xFFFF
//   97       }
??CrossCallReturnLabel_0:
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      ??zb_ReceiveDataIndication_10
        ; Setup parameters for call to function osal_memcmp
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 120)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 117)
        MOV     A,R1
        XRL     A,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        JNZ     ??zb_ReceiveDataIndication_9
//   98     } 
//   99     if(p!=NULL)
//  100     {
//  101       p->lostHeartCount=HEART_BEAT_MAX_COUNT;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??zb_ReceiveDataIndication_10
//  102     }
//  103   }
//  104 //´òÓ¡ÎÂ¶ÈÊý¾Ý
//  105   else if(command==TEMPERATURE_BEAT_CMD_ID )
??zb_ReceiveDataIndication_8:
        MOV     A,#0x4
        XRL     A,R4
        JNZ     ??zb_ReceiveDataIndication_11
        MOV     A,R5
??zb_ReceiveDataIndication_11:
        JZ      ??zb_ReceiveDataIndication_12
//  106   {
//  107    //uint8 buf[20];
//  108    HalUARTWrite(0,pData,osal_strlen(pData));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
//  109    HalUARTWrite(0,"\r\n",2);
//  110   }
//  111  //´òÓ¡¹âÇ¿Êý¾Ý
//  112   else if(command==LIGHT_BEAT_CMD_ID )
        MOV     A,#0x5
        XRL     A,R4
        JNZ     ??zb_ReceiveDataIndication_13
        MOV     A,R5
??zb_ReceiveDataIndication_13:
        JNZ     ??zb_ReceiveDataIndication_10
//  113   {
//  114    //uint8 buf[20];
//  115    HalUARTWrite(0,pData,osal_strlen(pData));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
??zb_ReceiveDataIndication_12:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
??zb_ReceiveDataIndication_6:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  116    HalUARTWrite(0,"\r\n",2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  117   }
//  118 }
??zb_ReceiveDataIndication_10:
        MOV     A,#0x66
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 117)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 120)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 120)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  119 
//  120 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  121 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
        CODE
//  122 {
        ; Saved register size: 0
        ; Auto size: 0
//  123 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  124 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function zb_HandleKeys
        CODE
//  126 {
        ; Saved register size: 0
        ; Auto size: 0
//  127   
//  128 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
//  129 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  130 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function zb_BindConfirm
        CODE
//  131 {
        ; Saved register size: 0
        ; Auto size: 0
//  132 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
//  133 
//  134 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  135 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function zb_StartConfirm
        CODE
//  136 {
        FUNCALL zb_StartConfirm, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 68
        MOV     A,#-0x44
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 77)
        MOV     A,R1
        MOV     R6,A
//  137   halUARTCfg_t uartcfg;
//  138   uartcfg.baudRate=HAL_UART_BR_115200;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  139   uartcfg.flowControl=FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  140   uartcfg.callBackFunc=uart_receive;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??uart_receive?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??uart_receive?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  141   HalUARTOpen(0,&uartcfg);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  142   //´®¿Ú³õÊ¼»¯
//  143   if(status==ZSUCCESS)
        MOV     A,R6
        JNZ     ??zb_StartConfirm_0
//  144   {
//  145     char buf[]="Coordinator is created successfully!\r\n";
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Coordinator is create...">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "Coordinator is create...">` & 0xff
        MOV     A,#0x27
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  146     HalUARTWrite(0,buf,osal_strlen(buf));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  147     osal_start_timerEx(sapi_TaskID,TIMER_TIMEOUT_EVT,2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  148   }  
//  149 }
??zb_StartConfirm_0:
        MOV     A,#0x44
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 117)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 112)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 117)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 117)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 112)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  150 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  151 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
        CODE
//  152 {
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 112, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 114, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 114, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 112, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 112, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 100
        MOV     A,#-0x64
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 112)
//  153   if(event&TIMER_TIMEOUT_EVT)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zb_HandleOsalEvent_0 & 0xFFFF
//  154   {
//  155     struct led_device_node *p=ledDeviceHeader.next;
        MOV     DPTR,#ledDeviceHeader
        LCALL   ??Subroutine6_0 & 0xFFFF
//  156     struct led_device_node *pre=ledDeviceHeader.next;
??CrossCallReturnLabel_9:
        MOV     DPTR,#ledDeviceHeader
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  157     osal_start_timerEx(sapi_TaskID,TIMER_TIMEOUT_EVT,2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??zb_HandleOsalEvent_1
//  158     while(p!=NULL)
//  159     {
//  160       p->lostHeartCount--;
//  161       if(p->lostHeartCount<=0)
//  162       {
//  163          char buf[100];
//  164          struct led_device_node *pTmp=p;
??zb_HandleOsalEvent_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
//  165          pre->next=p->next;  
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  166          p=p->next;
        LCALL   ?Subroutine2 & 0xFFFF
//  167          sprintf(buf,"endpoint:shortAddr=%u is off-line\r\n",(uint16)pTmp->shortAddr);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function sprintf
        MOV     A,R0
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 114)
        MOV     R4,#`?<Constant "endpoint:shortAddr=%u...">` & 0xff
        MOV     R5,#(`?<Constant "endpoint:shortAddr=%u...">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 112)
//  168          HalUARTWrite(0,buf,osal_strlen(buf));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  169          continue;
//  170       }
??zb_HandleOsalEvent_1:
        MOV     A,R6
        ORL     A,R7
        JZ      ??zb_HandleOsalEvent_0
        MOV     A,R6
        ADD     A,#0x4
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JZ      ??zb_HandleOsalEvent_2
//  171       pre=p;
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
//  172       p=p->next;
        LCALL   ?Subroutine2 & 0xFFFF
//  173     }    
//  174   }
??CrossCallReturnLabel_12:
        SJMP    ??zb_HandleOsalEvent_1
//  175 }
??zb_HandleOsalEvent_0:
        MOV     A,#0x64
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 112)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 112)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 117)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 112)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 112)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 112)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
//  176 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  177 void zb_FindDeviceConfirm( uint8 searchType, 
zb_FindDeviceConfirm:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
        CODE
//  178                           uint8 *searchKey, uint8 *result )
//  179 {
        ; Saved register size: 0
        ; Auto size: 0
//  180   
//  181 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock29
//  182 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  183 void uart_receive(uint8 port,uint8 event)
uart_receive:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function uart_receive
        CODE
//  184 {
        FUNCALL uart_receive, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uart_receive, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uart_receive, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 1,R2
//  185   uint16 dstAddr;
//  186   if(event& (HAL_UART_RX_FULL|HAL_UART_RX_ABOUT_FULL|HAL_UART_RX_TIMEOUT))
        MOV     A,#0x7
        ANL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??uart_receive_0 & 0xFFFF
//  187   {
//  188     //ÕâÀï²»ÊÇºÜÑÏ½÷£¬²»ÄÜºÜºÃµØ·Ö³öÒ»¸öÂß¼­Êý¾Ý°ü
//  189     uint8 buf[3];
//  190     struct led_device_node *p=ledDeviceHeader.next;
        MOV     DPTR,#ledDeviceHeader
        LCALL   ??Subroutine6_0 & 0xFFFF
//  191     HalUARTRead(port,buf,2);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalUARTRead?relay
        SJMP    ??uart_receive_1
//  192     while(p!=NULL)
//  193     {
//  194       if(p->flag[0]==buf[0])//Ñ°ÕÒ½Úµã±êÖ¾
//  195           break;
//  196       p=p->next;
??uart_receive_2:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R7,A
??uart_receive_1:
        MOV     A,R6
        ORL     A,R7
        JZ      ??uart_receive_0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
        JNZ     ??uart_receive_2
//  197     }
//  198     if(p!=NULL)
//  199     {
//  200       osal_memcpy(&dstAddr,p->shortAddr,2);
        ; Setup parameters for call to function osal_memcpy
        INC     DPTR
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  201       zb_SendDataRequest(dstAddr,TOGGLE_LED_CMD_ID,
//  202                        2,buf,0,FALSE,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R1,#0x2
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  203     }
//  204     
//  205     
//  206   }  
//  207 }
??uart_receive_0:
        MOV     A,#0x5
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 117)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uart_receive?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    uart_receive

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Led device come on!,s...">`:
        DB "Led device come on!,shortAddr=%u,name:=%u"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Coordinator is create...">`:
        DB "Coordinator is created successfully!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "endpoint:shortAddr=%u...">`:
        DB "endpoint:shortAddr=%u is off-line\015\012"

        END
// 
// 981 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
// 142 bytes in segment XDATA_ROM_C
//   6 bytes in segment XDATA_Z
// 
// 1 035 bytes of CODE  memory
//   142 bytes of CONST memory
//     6 bytes of XDATA memory
//
//Errors: none
//Warnings: 5
