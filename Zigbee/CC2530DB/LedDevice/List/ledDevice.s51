///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        21/Dec/2021  14:17:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\Source\ledDevice.c             /
//    Command line       =  -f C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-0 /
//                          1½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\S /
//                          impleAPIHeartBeatExp2\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wEndev.cfg (-DCPU32MHZ                    /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0          /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\zjw\Desktop\¿Î³Ì\ /
//                          ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SimpleAPIHeartBeatExp2\Source\ /
//                          ledDevice.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D       /
//                          RFD_RCVC_ALWAYS_ON=TRUE -D xMT_TASK -D            /
//                          xMT_SYS_FUNC -D MT_ZDO_FUNC -D                    /
//                          xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC         /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\LedDevice\List\ -lA   /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\LedDevice\List\       /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\LedDevice\Obj\ -e     /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\ -I                   /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\Source\ -I         /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\ZMain\TI2530 /
//                          DB\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ20 /
//                          21-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Sampl /
//                          es\SimpleAPIHeartBeatExp2\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                       /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\target\CC2530EB\ -I                      /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\include\ -I C:\Users\zjw\Desktop\¿Î³Ì\Îï /
//                          ÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Project /
//                          s\zstack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\ -I      /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\ -I                      /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\single_chip\ -I          /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mt\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼ /
//                          ¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\ /
//                          Samples\SimpleAPIHeartBeatExp2\CC2530DB\..\..\..\ /
//                          ..\..\Components\osal\include\ -I                 /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\saddr\ -I                           /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\sdata\ -I                           /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\af\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍ /
//                          øÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\z /
//                          stack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\nwk\ -I              /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sapi\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁ /
//                          ªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\ -I            /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sys\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁª /
//                          ÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\ /
//                          zstack\Samples\SimpleAPIHeartBeatExp2\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\ -I C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨Ð /
//                          Å¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstac /
//                          k\Samples\SimpleAPIHeartBeatExp2\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\f8w\ -Ohz                 /
//    List file          =  C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½Ì /
//                          Ñ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\Simp /
//                          leAPIHeartBeatExp2\CC2530DB\LedDevice\List\ledDev /
//                          ice.s51                                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ledDevice

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??Buzzer_Init?relay
        FUNCTION ??Buzzer_Init?relay,0203H
        PUBLIC ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,0203H
        PUBLIC ??GetLight?relay
        FUNCTION ??GetLight?relay,0203H
        PUBLIC ??Led_Init?relay
        FUNCTION ??Led_Init?relay,0203H
        PUBLIC ??Light_Init?relay
        FUNCTION ??Light_Init?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        PUBLIC Buzzer_Init
        FUNCTION Buzzer_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Delay_ms
        FUNCTION Delay_ms,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC GetLight
        FUNCTION GetLight,021201H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Led_Init
        FUNCTION Led_Init,0203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Light_Init
        FUNCTION Light_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_39000000
        PUBWEAK __Constant_42c80000
        PUBLIC ledDeviceInputCommandList
        PUBLIC ledDeviceOutputCommandList
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
HalAdcRead          SYMBOL "HalAdcRead"
Ds18b20Initial      SYMBOL "Ds18b20Initial"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
Temp_test           SYMBOL "Temp_test"
??Ds18b20Initial?relay SYMBOL "?relay", Ds18b20Initial
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??Temp_test?relay   SYMBOL "?relay", Temp_test
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
Buzzer_Init         SYMBOL "Buzzer_Init"
??Buzzer_Init?relay SYMBOL "?relay", Buzzer_Init
Delay_ms            SYMBOL "Delay_ms"
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
GetLight            SYMBOL "GetLight"
??GetLight?relay    SYMBOL "?relay", GetLight
Led_Init            SYMBOL "Led_Init"
??Led_Init?relay    SYMBOL "?relay", Led_Init
Light_Init          SYMBOL "Light_Init"
??Light_Init?relay  SYMBOL "?relay", Light_Init
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Ds18b20Initial
        FUNCTION Ds18b20Initial,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Temp_test
        FUNCTION Temp_test,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??Ds18b20Initial?relay
        FUNCTION ??Ds18b20Initial?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??Temp_test?relay
        FUNCTION ??Temp_test?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN sapi_TaskID
        EXTERN temp

// C:\Users\zjw\Desktop\¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ2021-01½ÌÑ§ÎÄ¼þ\ZStack-2.5.1a\Projects\zstack\Samples\SimpleAPIHeartBeatExp2\Source\ledDevice.c
//    1 #include "smartHome.h"
//    2 #include"OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    3 #include "sapi.h"
//    4 #include "hal_led.h"
//    5 #include "ds18b20.h"
//    6 #include "hal_adc.h"
//    7 #include "hal_sleep.h"
//    8 
//    9 
//   10 
//   11 
//   12 #define NUM_IN_CMD_LEDDEVICE 1
//   13 #define NUM_OUT_CMD_LEDDEVICE 3

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   14 const cId_t ledDeviceInputCommandList[NUM_IN_CMD_LEDDEVICE]=
ledDeviceInputCommandList:
        DW 2
//   15                                 {TOGGLE_LED_CMD_ID};

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   16 const cId_t ledDeviceOutputCommandList[NUM_OUT_CMD_LEDDEVICE]=
ledDeviceOutputCommandList:
        DATA16
        DW 1
        DW 3
        DW 4
//   17                                 {LEDJOINNET_CMD_ID,HEART_BEAT_CMD_ID,TEMPERATURE_BEAT_CMD_ID};

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   18 const SimpleDescriptionFormat_t zb_SimpleDesc=
zb_SimpleDesc:
        DB 1
        DATA16
        DW 1281
        DW 2
        DATA8
        DB 0
        DB 1
        DATA16
        DW ledDeviceInputCommandList
        DATA8
        DB 3
        DATA16
        DW ledDeviceOutputCommandList
//   19 {
//   20   ENDPOINT_ID_SMARTHOME,
//   21   PROFILE_ID_SMARTHOME,
//   22   DEVICE_ID_LEDDEVICE,
//   23   DEVIDE_VERSION_ID,
//   24   0,
//   25   NUM_IN_CMD_LEDDEVICE,
//   26   (cId_t*)ledDeviceInputCommandList,
//   27   NUM_OUT_CMD_LEDDEVICE,
//   28   (cId_t*)ledDeviceOutputCommandList  
//   29 };
//   30 /***********
//   31 Ö´ÐÐÊ±»ú£º·¢ËÍµÄÊý¾Ý°ü±»½ÓÊÕ·½ÊÕµ½Ê±±»µ÷ÓÃ
//   32 handle:°üµÄ±àºÅ£»
//   33 status:ZSUCCESS±íÊ¾³É¹¦½ÓÊÕ
//   34 ************/
//   35 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   36 void Led_Init()
Led_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Led_Init
        CODE
//   37 {
        ; Saved register size: 0
        ; Auto size: 0
//   38  P1SEL |= 0XEC;
        ORL     0xf4,#0xec
//   39  P1DIR |= 0X13;
        ORL     0xfe,#0x13
//   40 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE P1SEL
        REQUIRE P1DIR
//   41 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   42 void Light_Init()
Light_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Light_Init
        CODE
//   43 {
        ; Saved register size: 0
        ; Auto size: 0
//   44   P1SEL &= ~0x20;                 //ÉèÖÃP1.5ÎªÆÕÍ¨IO¿Ú
        ANL     0xf4,#0xdf
//   45   P1DIR &= ~0x20;                 //P1.5¶¨ÒåÎªÊäÈë¿Ú
        ANL     0xfe,#0xdf
//   46 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE P1SEL
        REQUIRE P1DIR
//   47 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   48 void Buzzer_Init()
Buzzer_Init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Buzzer_Init
        CODE
//   49 {
        ; Saved register size: 0
        ; Auto size: 0
//   50   P0SEL &= ~0x01;                 //ÉèÖÃP07ÎªÆÕÍ¨IO¿Ú
        ANL     0xf3,#0xfe
//   51   P0DIR |= 0x01;                 //P07¶¨ÒåÎªÊä³ö¿Ú
        ORL     0xfd,#0x1
//   52 
//   53 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE P0SEL
        REQUIRE P0DIR
//   54 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   55 void Delay_ms(uint8 k)
Delay_ms:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Delay_ms
        CODE
//   56 {
        FUNCALL Delay_ms, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//   57    MicroWait(k);//ºÁÃëÑÓÊ±
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   58 }
        LJMP    ??Subroutine3_0 & 0xFFFF
        CFI EndBlock cfiBlock3
//   59 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 uint8 GetLight()//¹âÇ¿¼ì²â
GetLight:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function GetLight
        CODE
//   61 {
        FUNCALL GetLight, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//   62     uint8 light=0;//°Ù·Ö±ÈµÄÕûÊýÖµ
//   63     float vol=0.0; //adc²ÉÑùµçÑ¹  
//   64     uint16 adc= HalAdcRead(HAL_ADC_CHANNEL_7, HAL_ADC_RESOLUTION_14); //ADC ²ÉÑùÖµ P06¿Ú
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x7
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//   65     //×î´ó²ÉÑùÖµ8192(ÒòÎª×î¸ßÎ»ÊÇ·ûºÅÎ»)
//   66     if(adc>=8192)
        CLR     C
        MOV     A,R1
        SUBB    A,#0x20
        JC      ??GetLight_0
//   67     {
//   68         return 0;
        MOV     R1,#0x0
        SJMP    ??GetLight_1
//   69     }
//   70     adc=8192-adc;//·´ÏàÒ»ÏÂ£¬ÒòÎªµÍÊª¶ÈÊ±AO¿ÚÊä³ö½Ï¸ßµçÆ½
//   71                    //Êª¶ÈÊ±AO¿ÚÊä³ö½ÏµÍµçÆ½   
//   72     //×ª»¯Îª°Ù·Ö±È
//   73     vol=(float)((float)adc)/8192.0;
//   74     //È¡°Ù·Ö±ÈÁ½Î»Êý×Ö
//   75     light=vol*100;
//   76     //light=adc;
//   77     return light;
??GetLight_0:
        CLR     A
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 0,A
        MOV     A,#0x20
        SUBB    A,R1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R1,?V0 + 0
??GetLight_1:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//   78 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   79 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function zb_SendDataConfirm
        CODE
//   80 {
        ; Saved register size: 0
        ; Auto size: 0
//   81   
//   82 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//   83 
//   84 /***********
//   85 Ö´ÐÐÊ±»ú£º½ÓÊÕµ½µÄÊý¾Ý°ü±»µ÷ÓÃ
//   86 ************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   87 void zb_ReceiveDataIndication( uint16 source, uint16 command, 
zb_ReceiveDataIndication:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
        CODE
//   88                               uint16 len, uint8 *pData  )
//   89 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//   90   if(command==TOGGLE_LED_CMD_ID)
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??zb_ReceiveDataIndication_0
        MOV     A,R5
??zb_ReceiveDataIndication_0:
        JNZ     ??zb_ReceiveDataIndication_1
//   91   {
//   92    
//   93     uint8 flag[2];
//   94           flag[0] = pData[0];
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//   95           flag[1] = pData[1];
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-6
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//   96     if(flag[0]==0x30)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x30
        JNZ     ??zb_ReceiveDataIndication_2
//   97     {
//   98       if(flag[1]==0x31)
??zb_ReceiveDataIndication_3:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??zb_ReceiveDataIndication_4
//   99         LED_3 = 1;
        SETB    0x90.4
        SJMP    ??zb_ReceiveDataIndication_1
//  100       else
//  101         LED_3 = 0;
??zb_ReceiveDataIndication_4:
        CLR     0x90.4
        SJMP    ??zb_ReceiveDataIndication_1
//  102      
//  103     }
//  104     else if(flag[0]==0x31)
??zb_ReceiveDataIndication_2:
        MOVX    A,@DPTR
        XRL     A,#0x31
        JZ      ??zb_ReceiveDataIndication_3
//  105     {
//  106        if(flag[1]==0x31)
//  107         LED_3 = 1;
//  108       else
//  109         LED_3 = 0;  
//  110     }
//  111   }
//  112 }
??zb_ReceiveDataIndication_1:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
        REQUIRE _A_P1
//  113 
//  114 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
        CODE
//  116 {
        ; Saved register size: 0
        ; Auto size: 0
//  117 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
//  118 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  119 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function zb_HandleKeys
        CODE
//  120 {
        ; Saved register size: 0
        ; Auto size: 0
//  121   
//  122 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
//  123 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  124 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function zb_BindConfirm
        CODE
//  125 {
        ; Saved register size: 0
        ; Auto size: 0
//  126 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//  127 
//  128 
//  129 //void zb_SendDataRequest ( uint16 destination, uint16 commandId, uint8 len,
//  130 //                          uint8 *pData, uint8 handle, uint8 ack, uint8 radius );

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  131 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function zb_StartConfirm
        CODE
//  132 {
        FUNCALL zb_StartConfirm, Led_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
//  133   
//  134   if(status==ZSUCCESS)
        JNZ     ??CrossCallReturnLabel_3
//  135   {
//  136     Led_Init();//³õÊ¼»¯led
        ; Setup parameters for call to function Led_Init
        LCALL   ??Led_Init?relay
//  137     Ds18b20Initial();//³õÊ¼»¯ÎÂ¶È
        ; Setup parameters for call to function Ds18b20Initial
        LCALL   ??Ds18b20Initial?relay
//  138     uint8 flag[1];//±êÖ¾
//  139     flag[0] = 0X30;//½ÚµãÒ»±êÖ¾
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x30
        MOVX    @DPTR,A
//  140     //¿É°Ñ½ÚµãËù°üº¬µÄledµÆµÄIDºÅ·¢ËÍ¹ýÈ¥
//  141     zb_SendDataRequest(0X0,LEDJOINNET_CMD_ID,
//  142                        1,flag,0,FALSE,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x1
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  143     osal_start_timerEx(sapi_TaskID,TIMER_TIMEOUT_EVT,2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        LCALL   ?Subroutine2 & 0xFFFF
//  144     osal_start_timerEx(sapi_TaskID,TEMPERATURE_TIMEOUT_EVT,1000);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x4
        LCALL   ?Subroutine2 & 0xFFFF
//  145   }
//  146 }
??CrossCallReturnLabel_3:
        MOV     A,#0x1
        CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock11
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_1
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
//  147 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  148 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
        CODE
//  149 {
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, Temp_test
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, GetLight
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, GetLight
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, GetLight
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
//  150   if(event&TIMER_TIMEOUT_EVT)//ÐÄÌø°üÊÂ¼þ
        MOV     C,0xE0 /* A   */.0
        JNC     ??zb_HandleOsalEvent_0
//  151   {
//  152     osal_start_timerEx(sapi_TaskID,TIMER_TIMEOUT_EVT,2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ?Subroutine1 & 0xFFFF
//  153     zb_SendDataRequest(0X0,HEART_BEAT_CMD_ID,
//  154                        0,NULL,0,FALSE,AF_DEFAULT_RADIUS); 
//  155   }
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        CLR     A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x0
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  156   
//  157   if(event&TEMPERATURE_TIMEOUT_EVT)//ÎÂ¶ÈÊÂ¼þ
??zb_HandleOsalEvent_0:
        MOV     A,R6
        ANL     A,#0x4
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_1 & 0xFFFF
//  158   {
//  159     uint8 T[6];    //ÎÂ¶È+ÌáÊ¾·û     
//  160     Temp_test();   //ÎÂ¶È¼ì²â    
        ; Setup parameters for call to function Temp_test
        LCALL   ??Temp_test?relay
//  161     T[0]=temp/10+48;
        MOV     B,#0xa
        MOV     DPTR,#temp
        MOVX    A,@DPTR
        DIV     AB
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  162     T[1]=temp%10+48;
        MOV     DPTR,#temp
        MOVX    A,@DPTR
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  163     T[2]='\r';
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xd
        MOVX    @DPTR,A
//  164     T[3]=GetLight()/10+0X30;//¹âÇ¿¼ì²â
        MOV     B,#0xa
        PUSH    B
        CFI CFA_SP SP+-1
        ; Setup parameters for call to function GetLight
        LCALL   ??GetLight?relay
        MOV     A,R1
        POP     B
        CFI CFA_SP SP+0
        DIV     AB
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  165     T[4]=GetLight()%10+0X30;
        ; Setup parameters for call to function GetLight
        LCALL   ??GetLight?relay
        MOV     A,R1
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  166     T[5]='\0';
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  167     osal_start_timerEx(sapi_TaskID,TEMPERATURE_TIMEOUT_EVT,1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x4
        MOV     R3,A
        LCALL   ?Subroutine1 & 0xFFFF
//  168     zb_SendDataRequest(0X0,TEMPERATURE_BEAT_CMD_ID ,
//  169                        6,T,0,FALSE,AF_DEFAULT_RADIUS); 
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x6
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  170      if(GetLight()> 80)
        ; Setup parameters for call to function GetLight
        LCALL   ??GetLight?relay
        MOV     A,R1
        CLR     C
        SUBB    A,#0x51
        JC      ??zb_HandleOsalEvent_2
//  171     {
//  172       buzzer = 1;
        SETB    0x80.0
//  173       Delay_ms(100);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//  174       
//  175     }
        SJMP    ??zb_HandleOsalEvent_1
//  176     else
//  177     {
//  178       buzzer = 0;
??zb_HandleOsalEvent_2:
        CLR     0x80.0
//  179     }
//  180   }
//  181  
//  182   }
??zb_HandleOsalEvent_1:
        MOV     A,#0x6
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock21
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function zb_SendDataRequest
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
//  183 
//  184 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  185 void zb_FindDeviceConfirm( uint8 searchType, 
zb_FindDeviceConfirm:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
        CODE
//  186                           uint8 *searchKey, uint8 *result )
//  187 {
        ; Saved register size: 0
        ; Auto size: 0
//  188   
//  189 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock25

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_39000000:
        DD 39000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Led_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Led_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Light_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Buzzer_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Buzzer_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetLight?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetLight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        END
// 
// 648 bytes in segment BANKED_CODE
//  78 bytes in segment BANK_RELAYS
//   6 bytes in segment SFR_AN
//  28 bytes in segment XDATA_ROM_C
// 
// 726 bytes of CODE  memory
//  20 bytes of CONST memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: 1
